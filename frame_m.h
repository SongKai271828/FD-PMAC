//
// Generated file, do not edit! Created by opp_msgtool 6.0 from frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

#define debug0

#define BST 0
#define NET 1
#define TQU 2
#define NCF 3
#define UPL 4
#define BSY 5
#define REQ 6
#define ERR 7
#define PTE_S 8
#define TQU_S 9
#define NCF_S 10
#define DAT 11

#define DOWN 0
#define UP 1
//#define FREQS 8

const long double prm_slot_s = 0.0008;
const long double frm_slot_s = 0.017;
const long double interval_s = 0.0001;
#define pte_slot_num 24
#define upload_delay_num 30
#define upload_slot_num 20
#define busy_slot_num 20
#define tqu_offset 3
#define ncf_offset 2
#define dat_offset 5
#define frm_load 95

#define NUM_EVENT 9
#define NUM_EVENT_S 14
#define pte_s 0
#define pte_m 6
#define pte_e 1
#define tqu_s 2
#define tqu_e 3
#define ncf_s 4
#define ncf_e 5
#define pco_s 7
#define timeout 8
#define upload 9
#define upload_timeout 10
#define upload_start 11
#define release_freq 12
#define recv_req 13

#define max_fail_cnt 3

#define init 0
#define pte_in 1
#define pte_mid 2
#define pte_out 3
#define tqu_in 4
#define tqu_out 5
#define ncf_in 6
#define ncf_out 7
#define upload_in 8
#define upload_ready 9
#define upload_wait 10
#define upload_ongoing 11
#define upload_out 12

#define recv_in 13
#define recv_out 14

class frame;
/**
 * Class generated from <tt>frame.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message frame
 * {
 *     int source;
 *     int destination;
 *     int hopCount = 0;
 *     int type;
 *     int dir;
 *     int freq;
 *     int route[20];
 *     int data[100];
 * }
 * </pre>
 */
class frame : public ::omnetpp::cMessage
{
  protected:
    int source = 0;
    int destination = 0;
    int hopCount = 0;
    int type = 0;
    int dir = 0;
  public:
    int freq = 0;
    int route[30] = {0};
    int data[100] = {0};

  private:
    void copy(const frame& other);

  protected:
    bool operator==(const frame&) = delete;

  public:
    frame(const char *name=nullptr, short kind=0);
    frame(const frame& other);
    virtual ~frame();
    frame& operator=(const frame& other);
    virtual frame *dup() const override {return new frame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSource() const;
    virtual void setSource(int source);

    virtual int getDestination() const;
    virtual void setDestination(int destination);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual int getType() const;
    virtual void setType(int type);

    virtual int getDir() const;
    virtual void setDir(int dir);

    virtual int getFreq() const;
    virtual void setFreq(int freq);

    virtual size_t getRouteArraySize() const;
    virtual int getRoute(size_t k) const;
    virtual void setRoute(size_t k, int route);

    virtual size_t getDataArraySize() const;
    virtual int getData(size_t k) const;
    virtual void setData(size_t k, int data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const frame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, frame& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline frame *fromAnyPtr(any_ptr ptr) { return check_and_cast<frame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FRAME_M_H

